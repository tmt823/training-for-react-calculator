{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/nb201803m042/Documents/823/10.work/90.\\u52C9\\u5F37/90.\\u81EA\\u5B66\\u7FD2/50.React/01_calculator/training-for-react-calculator/src/CalculatorApp.js\";\nimport React from 'react';\nimport { NumBtn } from \"./components/NumBtn\";\nimport { OperatorBtn } from \"./components/OperatorBtn\";\nimport { ResultBtn } from \"./components/ResultBtn\";\nimport { ClearBtn } from \"./components/ClearBtn\";\nimport \"./css/index.css\";\nexport class CalculatorApp extends React.Component {\n  constructor() {\n    super();\n\n    this.clickNum = number => {\n      if (this.state.operator === \"\") {\n        this.setState({\n          displayNum: this.state.displayNum + number\n        });\n      } else {\n        this.setState({\n          inputNum: this.state.inputNum + number\n        });\n      }\n    };\n\n    this.clickOperator = operator => {\n      this.setState({\n        operator: operator\n      });\n    };\n\n    this.clickResult = () => {\n      switch (this.state.operator) {\n        case '+':\n          this.setState({\n            displayNum: Number(this.state.displayNum) + Number(this.state.inputNum)\n          });\n          break;\n\n        case '-':\n          this.setState({\n            displayNum: Number(this.state.displayNum) - Number(this.state.inputNum)\n          });\n          break;\n\n        case '*':\n          this.setState({\n            displayNum: Number(this.state.displayNum) * Number(this.state.inputNum)\n          });\n          break;\n\n        case '/':\n          this.setState({\n            displayNum: Number(this.state.displayNum) / Number(this.state.inputNum)\n          });\n          break;\n\n        default:\n      }\n\n      this.setState({\n        inputNum: \"\"\n      });\n    };\n\n    this.clickClear = () => {\n      this.setState({\n        displayNum: \"\",\n        inputNum: \"\",\n        operator: \"\"\n      });\n    };\n\n    this.state = {\n      displayNum: \"\",\n      inputNum: \"\",\n      operator: \"\"\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"title\",\n        children: \"Calculator\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text\",\n          children: [\"displayNum : \", this.state.displayNum]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(NumBtn, {\n          clickNum: this.clickNum\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(OperatorBtn, {\n          clickOperator: this.clickOperator\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(ResultBtn, {\n          clickResult: this.clickResult\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(ClearBtn, {\n          clickClear: this.clickClear\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/nb201803m042/Documents/823/10.work/90.勉強/90.自学習/50.React/01_calculator/training-for-react-calculator/src/CalculatorApp.js"],"names":["React","NumBtn","OperatorBtn","ResultBtn","ClearBtn","CalculatorApp","Component","constructor","clickNum","number","state","operator","setState","displayNum","inputNum","clickOperator","clickResult","Number","clickClear","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { NumBtn } from \"./components/NumBtn\";\nimport { OperatorBtn } from \"./components/OperatorBtn\";\nimport { ResultBtn } from \"./components/ResultBtn\";\nimport { ClearBtn } from \"./components/ClearBtn\";\n\nimport \"./css/index.css\";\n\nexport class CalculatorApp extends React.Component {\n  constructor(){\n    super();\n    this.state = {\n      displayNum: \"\",\n      inputNum: \"\",\n      operator: \"\",\n    };\n  }\n  render() {\n    return (\n      <div className=\"content\">\n        <h2 className=\"title\">Calculator</h2>\n        <div>\n        <p className=\"text\">displayNum : {this.state.displayNum}</p>\n        <NumBtn clickNum={this.clickNum} />\n        <OperatorBtn clickOperator={this.clickOperator} />\n        <ResultBtn clickResult={this.clickResult} />\n        <ClearBtn clickClear={this.clickClear} />\n        </div>\n      </div>\n    );\n  }\n\n  clickNum = number => {\n    if(this.state.operator === \"\") {\n      this.setState({displayNum: this.state.displayNum + number});\n    } else {\n      this.setState({inputNum: this.state.inputNum + number});\n    }\n  }\n  clickOperator = operator => {\n    this.setState({\n      operator: operator\n    });\n  }\n  clickResult = () => {\n    switch(this.state.operator){\n      case '+':\n        this.setState({\n          displayNum: Number(this.state.displayNum) + Number(this.state.inputNum)\n        });\n        break;\n      case '-':\n        this.setState({\n          displayNum: Number(this.state.displayNum) - Number(this.state.inputNum)\n        });\n        break;\n      case '*':\n        this.setState({\n          displayNum: Number(this.state.displayNum) * Number(this.state.inputNum)\n        });\n        break;\n      case '/':\n        this.setState({\n          displayNum: Number(this.state.displayNum) / Number(this.state.inputNum)\n        });\n        break;\n      default:\n    }\n    this.setState({inputNum: \"\"});\n  }\n\n  clickClear = () => {\n    this.setState({\n      displayNum: \"\",\n      inputNum: \"\",\n      operator: \"\",\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}